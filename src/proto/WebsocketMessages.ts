// @generated by protobuf-ts 2.8.2
// @generated from protobuf file "WebsocketMessages.proto" (package "WebsocketRequestPackage", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message WebsocketRequestPackage.WebsocketMessage
 */
export interface WebsocketMessage {
    /**
     * @generated from protobuf field: WebsocketRequestPackage.WebsocketMessage.MessageType messageType = 1;
     */
    messageType: WebsocketMessage_MessageType;
    /**
     * 时间戳
     *
     * @generated from protobuf field: int64 timestamp = 2;
     */
    timestamp: bigint;
    /**
     * @generated from protobuf field: WebsocketRequestPackage.WebsocketMessage.MessageData messageData = 3;
     */
    messageData?: WebsocketMessage_MessageData;
}
/**
 * 消息体
 *
 * @generated from protobuf message WebsocketRequestPackage.WebsocketMessage.MessageData
 */
export interface WebsocketMessage_MessageData {
    /**
     * @generated from protobuf field: WebsocketRequestPackage.WebsocketMessage.MessageData.OperationType operationType = 1;
     */
    operationType: WebsocketMessage_MessageData_OperationType;
    /**
     * @generated from protobuf field: int64 messageId = 2;
     */
    messageId: bigint;
    /**
     * @generated from protobuf field: bytes messageData = 3;
     */
    messageData: Uint8Array;
}
/**
 * 操作类型
 *
 * @generated from protobuf enum WebsocketRequestPackage.WebsocketMessage.MessageData.OperationType
 */
export enum WebsocketMessage_MessageData_OperationType {
    /**
     * 未知
     *
     * @generated from protobuf enum value: UNKNOWN = 0;
     */
    UNKNOWN = 0,
    /**
     * 心跳
     *
     * @generated from protobuf enum value: HEARTBEAT = 1;
     */
    HEARTBEAT = 1,
    /**
     * openai
     *
     * @generated from protobuf enum value: OPENAI = 2;
     */
    OPENAI = 2
}
/**
 * 消息类型
 *
 * @generated from protobuf enum WebsocketRequestPackage.WebsocketMessage.MessageType
 */
export enum WebsocketMessage_MessageType {
    /**
     * 未知
     *
     * @generated from protobuf enum value: UNKNOWN = 0;
     */
    UNKNOWN = 0,
    /**
     * 请求
     *
     * @generated from protobuf enum value: REQUEST = 1;
     */
    REQUEST = 1,
    /**
     * 响应
     *
     * @generated from protobuf enum value: RESPONSE = 3;
     */
    RESPONSE = 3
}
// @generated message type with reflection information, may provide speed optimized methods
class WebsocketMessage$Type extends MessageType<WebsocketMessage> {
    constructor() {
        super("WebsocketRequestPackage.WebsocketMessage", [
            { no: 1, name: "messageType", kind: "enum", T: () => ["WebsocketRequestPackage.WebsocketMessage.MessageType", WebsocketMessage_MessageType] },
            { no: 2, name: "timestamp", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "messageData", kind: "message", T: () => WebsocketMessage_MessageData }
        ]);
    }
    create(value?: PartialMessage<WebsocketMessage>): WebsocketMessage {
        const message = { messageType: 0, timestamp: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WebsocketMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WebsocketMessage): WebsocketMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* WebsocketRequestPackage.WebsocketMessage.MessageType messageType */ 1:
                    message.messageType = reader.int32();
                    break;
                case /* int64 timestamp */ 2:
                    message.timestamp = reader.int64().toBigInt();
                    break;
                case /* WebsocketRequestPackage.WebsocketMessage.MessageData messageData */ 3:
                    message.messageData = WebsocketMessage_MessageData.internalBinaryRead(reader, reader.uint32(), options, message.messageData);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WebsocketMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* WebsocketRequestPackage.WebsocketMessage.MessageType messageType = 1; */
        if (message.messageType !== 0)
            writer.tag(1, WireType.Varint).int32(message.messageType);
        /* int64 timestamp = 2; */
        if (message.timestamp !== 0n)
            writer.tag(2, WireType.Varint).int64(message.timestamp);
        /* WebsocketRequestPackage.WebsocketMessage.MessageData messageData = 3; */
        if (message.messageData)
            WebsocketMessage_MessageData.internalBinaryWrite(message.messageData, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message WebsocketRequestPackage.WebsocketMessage
 */
export const WebsocketMessage = new WebsocketMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WebsocketMessage_MessageData$Type extends MessageType<WebsocketMessage_MessageData> {
    constructor() {
        super("WebsocketRequestPackage.WebsocketMessage.MessageData", [
            { no: 1, name: "operationType", kind: "enum", T: () => ["WebsocketRequestPackage.WebsocketMessage.MessageData.OperationType", WebsocketMessage_MessageData_OperationType] },
            { no: 2, name: "messageId", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "messageData", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<WebsocketMessage_MessageData>): WebsocketMessage_MessageData {
        const message = { operationType: 0, messageId: 0n, messageData: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WebsocketMessage_MessageData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WebsocketMessage_MessageData): WebsocketMessage_MessageData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* WebsocketRequestPackage.WebsocketMessage.MessageData.OperationType operationType */ 1:
                    message.operationType = reader.int32();
                    break;
                case /* int64 messageId */ 2:
                    message.messageId = reader.int64().toBigInt();
                    break;
                case /* bytes messageData */ 3:
                    message.messageData = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WebsocketMessage_MessageData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* WebsocketRequestPackage.WebsocketMessage.MessageData.OperationType operationType = 1; */
        if (message.operationType !== 0)
            writer.tag(1, WireType.Varint).int32(message.operationType);
        /* int64 messageId = 2; */
        if (message.messageId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.messageId);
        /* bytes messageData = 3; */
        if (message.messageData.length)
            writer.tag(3, WireType.LengthDelimited).bytes(message.messageData);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message WebsocketRequestPackage.WebsocketMessage.MessageData
 */
export const WebsocketMessage_MessageData = new WebsocketMessage_MessageData$Type();
