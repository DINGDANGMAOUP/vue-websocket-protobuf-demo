// @generated by protobuf-ts 2.8.2
// @generated from protobuf file "WebsocketMessages.proto" (package "WebsocketRequestPackage", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message WebsocketRequestPackage.WebsocketMessage
 */
export interface WebsocketMessage {
    /**
     * @generated from protobuf field: WebsocketRequestPackage.WebsocketMessage.MessageFlag flag = 1;
     */
    flag: WebsocketMessage_MessageFlag;
    /**
     * 时间戳
     *
     * @generated from protobuf field: int64 timestamp = 2;
     */
    timestamp: bigint;
    /**
     * @generated from protobuf field: WebsocketRequestPackage.WebsocketMessage.MessageBody body = 3;
     */
    body?: WebsocketMessage_MessageBody;
}
/**
 * 消息体
 *
 * @generated from protobuf message WebsocketRequestPackage.WebsocketMessage.MessageBody
 */
export interface WebsocketMessage_MessageBody {
    /**
     * @generated from protobuf field: WebsocketRequestPackage.WebsocketMessage.MessageBody.OperationType operationType = 1;
     */
    operationType: WebsocketMessage_MessageBody_OperationType;
    /**
     * @generated from protobuf field: int64 identify = 2;
     */
    identify: bigint;
    /**
     * @generated from protobuf field: bytes context = 3;
     */
    context: Uint8Array;
}
/**
 * 操作类型
 *
 * @generated from protobuf enum WebsocketRequestPackage.WebsocketMessage.MessageBody.OperationType
 */
export enum WebsocketMessage_MessageBody_OperationType {
    /**
     * 心跳
     *
     * @generated from protobuf enum value: HEARTBEAT = 0;
     */
    HEARTBEAT = 0,
    /**
     * openai
     *
     * @generated from protobuf enum value: OPENAI = 1;
     */
    OPENAI = 1
}
/**
 * 消息来源
 *
 * @generated from protobuf enum WebsocketRequestPackage.WebsocketMessage.MessageFlag
 */
export enum WebsocketMessage_MessageFlag {
    /**
     * web
     *
     * @generated from protobuf enum value: WEB = 0;
     */
    WEB = 0,
    /**
     * 服务器
     *
     * @generated from protobuf enum value: SERVER = 1;
     */
    SERVER = 1
}
// @generated message type with reflection information, may provide speed optimized methods
class WebsocketMessage$Type extends MessageType<WebsocketMessage> {
    constructor() {
        super("WebsocketRequestPackage.WebsocketMessage", [
            { no: 1, name: "flag", kind: "enum", T: () => ["WebsocketRequestPackage.WebsocketMessage.MessageFlag", WebsocketMessage_MessageFlag] },
            { no: 2, name: "timestamp", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "body", kind: "message", T: () => WebsocketMessage_MessageBody }
        ]);
    }
    create(value?: PartialMessage<WebsocketMessage>): WebsocketMessage {
        const message = { flag: 0, timestamp: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WebsocketMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WebsocketMessage): WebsocketMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* WebsocketRequestPackage.WebsocketMessage.MessageFlag flag */ 1:
                    message.flag = reader.int32();
                    break;
                case /* int64 timestamp */ 2:
                    message.timestamp = reader.int64().toBigInt();
                    break;
                case /* WebsocketRequestPackage.WebsocketMessage.MessageBody body */ 3:
                    message.body = WebsocketMessage_MessageBody.internalBinaryRead(reader, reader.uint32(), options, message.body);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WebsocketMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* WebsocketRequestPackage.WebsocketMessage.MessageFlag flag = 1; */
        if (message.flag !== 0)
            writer.tag(1, WireType.Varint).int32(message.flag);
        /* int64 timestamp = 2; */
        if (message.timestamp !== 0n)
            writer.tag(2, WireType.Varint).int64(message.timestamp);
        /* WebsocketRequestPackage.WebsocketMessage.MessageBody body = 3; */
        if (message.body)
            WebsocketMessage_MessageBody.internalBinaryWrite(message.body, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message WebsocketRequestPackage.WebsocketMessage
 */
export const WebsocketMessage = new WebsocketMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WebsocketMessage_MessageBody$Type extends MessageType<WebsocketMessage_MessageBody> {
    constructor() {
        super("WebsocketRequestPackage.WebsocketMessage.MessageBody", [
            { no: 1, name: "operationType", kind: "enum", T: () => ["WebsocketRequestPackage.WebsocketMessage.MessageBody.OperationType", WebsocketMessage_MessageBody_OperationType] },
            { no: 2, name: "identify", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "context", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<WebsocketMessage_MessageBody>): WebsocketMessage_MessageBody {
        const message = { operationType: 0, identify: 0n, context: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WebsocketMessage_MessageBody>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WebsocketMessage_MessageBody): WebsocketMessage_MessageBody {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* WebsocketRequestPackage.WebsocketMessage.MessageBody.OperationType operationType */ 1:
                    message.operationType = reader.int32();
                    break;
                case /* int64 identify */ 2:
                    message.identify = reader.int64().toBigInt();
                    break;
                case /* bytes context */ 3:
                    message.context = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WebsocketMessage_MessageBody, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* WebsocketRequestPackage.WebsocketMessage.MessageBody.OperationType operationType = 1; */
        if (message.operationType !== 0)
            writer.tag(1, WireType.Varint).int32(message.operationType);
        /* int64 identify = 2; */
        if (message.identify !== 0n)
            writer.tag(2, WireType.Varint).int64(message.identify);
        /* bytes context = 3; */
        if (message.context.length)
            writer.tag(3, WireType.LengthDelimited).bytes(message.context);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message WebsocketRequestPackage.WebsocketMessage.MessageBody
 */
export const WebsocketMessage_MessageBody = new WebsocketMessage_MessageBody$Type();
